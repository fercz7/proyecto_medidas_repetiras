real tauR;
// tauH: efectos de hongosHMA+
real tauH;
// delta: efectos de interacion dia:riegoWW
real delta;
// beta0i: efectos aleatorios sobre interceptos
real beta0i[p];
// beta1i: efectos aleatorios sobre pendiente
real beta1i[p];
// sigma0: desviación estándar de interceptos
real<lower=0> sigma0;
// sigma1: desviación estándar de pendientes
real<lower=0> sigma1;
// sigma_error: desviación estándar del error
real<lower=0> sigma_error;
}
transformed parameters  {
// Media condicional
real mu[N];
for (i in 1:N) {
mu[i] = beta0 + beta1*dia[i] + tauR*riegoWW[i] + tauH*hongosH[i] + delta*dia[i]*riegoWW[i] +
beta0i[1]*1.2[i]+
beta0i[2]*1.3[i]+
beta0i[3]*1.4[i]+
beta0i[4]*1.5[i]+
beta0i[5]*1.6[i]+
beta0i[6]*1.8[i]+
beta0i[7]*1.9[i]+
beta0i[8]*2.1[i]+
beta0i[9]*2.10[i]+
beta0i[10]*2.3[i]+
beta0i[11]*2.4[i]+
beta0i[12]*2.5[i]+
beta0i[13]*2.6[i]+
beta0i[14]*2.7[i]+
beta0i[15]*2.9[i]+
beta0i[16]*3.10[i]+
beta0i[17]*3.2[i]+
beta0i[18]*3.3[i]+
beta0i[19]*3.4[i]+
beta0i[20]*3.5[i]+
beta0i[21]*3.6[i]+
beta0i[22]*3.7[i]+
beta0i[23]*3.8[i]+
beta0i[24]*4.1[i]+
beta0i[25]*4.10[i]+
beta0i[26]*4.2[i]+
beta0i[27]*4.3[i]+
beta0i[28]*4.4[i]+
beta0i[29]*4.5[i]+
beta0i[30]*4.6[i]+
beta0i[31]*4.7[i]+
beta0i[32]*4.8[i]+
beta0i[33]*4.9[i]+
beta1i[1]*1.2[i]*dia[i]+
beta1i[2]*1.3[i]*dia[i]+
beta1i[3]*1.4[i]*dia[i]+
beta1i[4]*1.5[i]*dia[i]+
beta1i[5]*1.6[i]*dia[i]+
beta1i[6]*1.8[i]*dia[i]+
beta1i[7]*1.9[i]*dia[i]+
beta1i[8]*2.1[i]*dia[i]+
beta1i[9]*2.10[i]*dia[i]+
beta1i[10]*2.3[i]*dia[i]+
beta1i[11]*2.4[i]*dia[i]+
beta1i[12]*2.5[i]*dia[i]+
beta1i[13]*2.6[i]*dia[i]+
beta1i[14]*2.7[i]*dia[i]+
beta1i[15]*2.9[i]*dia[i]+
beta1i[16]*3.10[i]*dia[i]+
beta1i[17]*3.2[i]*dia[i]+
beta1i[18]*3.3[i]*dia[i]+
beta1i[19]*3.4[i]*dia[i]+
beta1i[20]*3.5[i]*dia[i]+
beta1i[21]*3.6[i]*dia[i]+
beta1i[22]*3.7[i]*dia[i]+
beta1i[23]*3.8[i]*dia[i]+
beta1i[24]*4.1[i]*dia[i]+
beta1i[25]*4.10[i]*dia[i]+
beta1i[26]*4.2[i]*dia[i]+
beta1i[27]*4.3[i]*dia[i]+
beta1i[28]*4.4[i]*dia[i]+
beta1i[29]*4.5[i]*dia[i]+
beta1i[30]*4.6[i]*dia[i]+
beta1i[31]*4.7[i]*dia[i]+
beta1i[32]*4.8[i]*dia[i]+
beta1i[33]*4.9[i]*dia[i];
}
}
model {
beta0i ~ normal(0, sigma0);
beta1i ~ normal(0, sigma1);
Y ~ normal(mu, sigma_error);
}
"
stan.fit1 <- stan(
model_code = stan.mod1,
data       = dat,
chains     = 2,
iter       = 100,
warmup     = 50,
cores      = parallel::detectCores(),
)
#hay 33 plantas
is.factor( base2$planta)
#hay 33 plantas
levels( base2$planta) = paste( "p", names(base2$planta), sep = "")
#hay 33 plantas
levels( base2$planta) = paste( "p", names(base2$planta), sep = "")
#hay 33 plantas
levels( base2$planta) = paste( "p", levels(base2$planta), sep = "")
View(base2)
mod4g = lme4::lmer( diametro ~ dia+riego+hongos+dia*riego+ (1|planta) + (0+dia|planta) , REML = F, data = base2)
summary(mod4g)
xa=t(as.matrix(attributes(mod4g)$pp$Zt))[,1:33]
dat.a=as.list(as.data.frame(xa))
names(dat.a)
dat.f=as.list(as.data.frame(model.matrix(mod4g)))
names(dat.f)
names(dat.f)=c("intercepto","dia","riegoWW","hongosH", "dia:riegoWW")
names(dat.f)
dat=c(dat.f, dat.a)
names(dat)
dat$Y = base2$diametro
dat$N = length(base2$diametro)
dat$p = length(levels(base2$planta))
names(dat)
#dat
stan.mod1 = "
data {
// Numero de observaciones
int<lower=0> N;
// Numero de plantas
int<lower=0> p;
// Variables de la parte sistemática / tomar como guia names(dat)
int <lower=0, upper=1> intercepto[N];
real dia[N];
int <lower=0, upper=1> riegoWW[N];
int <lower=0, upper=1> hongosH[N];
int <lower=0, upper=1> p1.2[N];
int <lower=0, upper=1>p1.3[N];
int <lower=0, upper=1>p1.4[N];
int <lower=0, upper=1>p1.5[N];
int <lower=0, upper=1>p1.6[N];
int <lower=0, upper=1>p1.8[N];
int <lower=0, upper=1>p1.9[N];
int <lower=0, upper=1>p2.1[N];
int <lower=0, upper=1>p2.10[N];
int <lower=0, upper=1>p2.3[N];
int <lower=0, upper=1>p2.4[N];
int <lower=0, upper=1>p2.5[N];
int <lower=0, upper=1>p2.6[N];
int <lower=0, upper=1>p2.7[N];
int <lower=0, upper=1>p2.9[N];
int <lower=0, upper=1>p3.10[N];
int <lower=0, upper=1>p3.2[N];
int <lower=0, upper=1>p3.3[N];
int <lower=0, upper=1>p3.4[N];
int <lower=0, upper=1>p3.5[N];
int <lower=0, upper=1>p3.6[N];
int <lower=0, upper=1>p3.7[N];
int <lower=0, upper=1>p3.8[N];
int <lower=0, upper=1>p4.1[N];
int <lower=0, upper=1>p4.10[N];
int <lower=0, upper=1>p4.2[N];
int <lower=0, upper=1>p4.3[N];
int <lower=0, upper=1>p4.4[N];
int <lower=0, upper=1>p4.5[N];
int <lower=0, upper=1>p4.6[N];
int <lower=0, upper=1>p4.7[N];
int <lower=0, upper=1>p4.8[N];
int <lower=0, upper=1>p4.9[N];
// Respuesta
real Y[N];
}
parameters {
// beta0: intercepto
real beta0;
// beta1: pendiente general
real beta1;
// tauR: efectos de riegoWW
real tauR;
// tauH: efectos de hongosHMA+
real tauH;
// delta: efectos de interacion dia:riegoWW
real delta;
// beta0i: efectos aleatorios sobre interceptos
real beta0i[p];
// beta1i: efectos aleatorios sobre pendiente
real beta1i[p];
// sigma0: desviación estándar de interceptos
real<lower=0> sigma0;
// sigma1: desviación estándar de pendientes
real<lower=0> sigma1;
// sigma_error: desviación estándar del error
real<lower=0> sigma_error;
}
transformed parameters  {
// Media condicional
real mu[N];
for (i in 1:N) {
mu[i] = beta0 + beta1*dia[i] + tauR*riegoWW[i] + tauH*hongosH[i] + delta*dia[i]*riegoWW[i] +
beta0i[1]*p1.2[i]+
beta0i[2]*p1.3[i]+
beta0i[3]*p1.4[i]+
beta0i[4]*p1.5[i]+
beta0i[5]*p1.6[i]+
beta0i[6]*p1.8[i]+
beta0i[7]*p1.9[i]+
beta0i[8]*p2.1[i]+
beta0i[9]*p2.10[i]+
beta0i[10]*p2.3[i]+
beta0i[11]*p2.4[i]+
beta0i[12]*p2.5[i]+
beta0i[13]*p2.6[i]+
beta0i[14]*p2.7[i]+
beta0i[15]*p2.9[i]+
beta0i[16]*p3.10[i]+
beta0i[17]*p3.2[i]+
beta0i[18]*p3.3[i]+
beta0i[19]*p3.4[i]+
beta0i[20]*p3.5[i]+
beta0i[21]*p3.6[i]+
beta0i[22]*p3.7[i]+
beta0i[23]*p3.8[i]+
beta0i[24]*p4.1[i]+
beta0i[25]*p4.10[i]+
beta0i[26]*p4.2[i]+
beta0i[27]*p4.3[i]+
beta0i[28]*p4.4[i]+
beta0i[29]*p4.5[i]+
beta0i[30]*p4.6[i]+
beta0i[31]*p4.7[i]+
beta0i[32]*p4.8[i]+
beta0i[33]*p4.9[i]+
beta1i[1]*p1.2[i]*dia[i]+
beta1i[2]*p1.3[i]*dia[i]+
beta1i[3]*p1.4[i]*dia[i]+
beta1i[4]*p1.5[i]*dia[i]+
beta1i[5]*p1.6[i]*dia[i]+
beta1i[6]*p1.8[i]*dia[i]+
beta1i[7]*p1.9[i]*dia[i]+
beta1i[8]*p2.1[i]*dia[i]+
beta1i[9]*p2.10[i]*dia[i]+
beta1i[10]*p2.3[i]*dia[i]+
beta1i[11]*p2.4[i]*dia[i]+
beta1i[12]*p2.5[i]*dia[i]+
beta1i[13]*p2.6[i]*dia[i]+
beta1i[14]*p2.7[i]*dia[i]+
beta1i[15]*p2.9[i]*dia[i]+
beta1i[16]*p3.10[i]*dia[i]+
beta1i[17]*p3.2[i]*dia[i]+
beta1i[18]*p3.3[i]*dia[i]+
beta1i[19]*p3.4[i]*dia[i]+
beta1i[20]*p3.5[i]*dia[i]+
beta1i[21]*p3.6[i]*dia[i]+
beta1i[22]*p3.7[i]*dia[i]+
beta1i[23]*p3.8[i]*dia[i]+
beta1i[24]*p4.1[i]*dia[i]+
beta1i[25]*p4.10[i]*dia[i]+
beta1i[26]*p4.2[i]*dia[i]+
beta1i[27]*p4.3[i]*dia[i]+
beta1i[28]*p4.4[i]*dia[i]+
beta1i[29]*p4.5[i]*dia[i]+
beta1i[30]*p4.6[i]*dia[i]+
beta1i[31]*p4.7[i]*dia[i]+
beta1i[32]*p4.8[i]*dia[i]+
beta1i[33]*p4.9[i]*dia[i];
}
}
model {
beta0i ~ normal(0, sigma0);
beta1i ~ normal(0, sigma1);
Y ~ normal(mu, sigma_error);
}
"
stan.fit1 <- stan(
model_code = stan.mod1,
data       = dat,
chains     = 2,
iter       = 100,
warmup     = 50,
cores      = parallel::detectCores(),
)
stan.fit1 <- stan(
model_code = stan.mod1,
data       = dat,
chains     = 2,
iter       = 100,
warmup     = 50,
cores      = parallel::detectCores(),
)
library(rstan)
library(lme4)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
load("germinacion.Rdata")
vacios = names(which(table(base$altura,base$planta)[1,]>1))
`%notin%` <- Negate(`%in%`)
base2 <- base %>% filter( planta %notin% vacios)
library( dplyr)
library(rstan)
library(lme4)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
load("germinacion.Rdata")
vacios = names(which(table(base$altura,base$planta)[1,]>1))
`%notin%` <- Negate(`%in%`)
base2 <- base %>% filter( planta %notin% vacios)
#hay 33 plantas
levels( base2$planta) = paste( "p", levels(base2$planta), sep = "")
#base$edad1=base$edad-8 TENGO QUE HACERLO?
mod4g = lme4::lmer( diametro ~ dia+riego+hongos+dia*riego+ (1|planta) + (0+dia|planta) , REML = F, data = base2)
summary(mod4g)
xa=t(as.matrix(attributes(mod4g)$pp$Zt))[,1:33]
dat.a=as.list(as.data.frame(xa))
names(dat.a)
dat.f=as.list(as.data.frame(model.matrix(mod4g)))
names(dat.f)
names(dat.f)=c("intercepto","dia","riegoWW","hongosH", "dia:riegoWW")
names(dat.f)
dat=c(dat.f, dat.a)
names(dat)
names(dat.f)=c("intercepto","dia","riegoWW","hongosH", "dia:riegoWW")
names(dat.f)
stan.mod1 = "
data {
// Numero de observaciones
int<lower=0> N;
// Numero de plantas
int<lower=0> p;
// Variables de la parte sistemática / tomar como guia names(dat)
int <lower=0, upper=1> intercepto[N];
real dia[N];
int <lower=0, upper=1> riegoWW[N];
int <lower=0, upper=1> hongosH[N];
int <lower=0, upper=1> p1.2[N];
int <lower=0, upper=1>p1.3[N];
int <lower=0, upper=1>p1.4[N];
int <lower=0, upper=1>p1.5[N];
int <lower=0, upper=1>p1.6[N];
int <lower=0, upper=1>p1.8[N];
int <lower=0, upper=1>p1.9[N];
int <lower=0, upper=1>p2.1[N];
int <lower=0, upper=1>p2.10[N];
int <lower=0, upper=1>p2.3[N];
int <lower=0, upper=1>p2.4[N];
int <lower=0, upper=1>p2.5[N];
int <lower=0, upper=1>p2.6[N];
int <lower=0, upper=1>p2.7[N];
int <lower=0, upper=1>p2.9[N];
int <lower=0, upper=1>p3.10[N];
int <lower=0, upper=1>p3.2[N];
int <lower=0, upper=1>p3.3[N];
int <lower=0, upper=1>p3.4[N];
int <lower=0, upper=1>p3.5[N];
int <lower=0, upper=1>p3.6[N];
int <lower=0, upper=1>p3.7[N];
int <lower=0, upper=1>p3.8[N];
int <lower=0, upper=1>p4.1[N];
int <lower=0, upper=1>p4.10[N];
int <lower=0, upper=1>p4.2[N];
int <lower=0, upper=1>p4.3[N];
int <lower=0, upper=1>p4.4[N];
int <lower=0, upper=1>p4.5[N];
int <lower=0, upper=1>p4.6[N];
int <lower=0, upper=1>p4.7[N];
int <lower=0, upper=1>p4.8[N];
int <lower=0, upper=1>p4.9[N];
// Respuesta
real Y[N];
}
parameters {
// beta0: intercepto
real beta0;
// beta1: pendiente general
real beta1;
// tauR: efectos de riegoWW
real tauR;
// tauH: efectos de hongosHMA+
real tauH;
// delta: efectos de interacion dia:riegoWW
real delta;
// beta0i: efectos aleatorios sobre interceptos
real beta0i[p];
// beta1i: efectos aleatorios sobre pendiente
real beta1i[p];
// sigma0: desviación estándar de interceptos
real<lower=0> sigma0;
// sigma1: desviación estándar de pendientes
real<lower=0> sigma1;
// sigma_error: desviación estándar del error
real<lower=0> sigma_error;
}
transformed parameters  {
// Media condicional
real mu[N];
for (i in 1:N) {
mu[i] = beta0 + beta1*dia[i] + tauR*riegoWW[i] + tauH*hongosH[i] + delta*dia[i]*riegoWW[i] +
beta0i[1]*p1.2[i]+
beta0i[2]*p1.3[i]+
beta0i[3]*p1.4[i]+
beta0i[4]*p1.5[i]+
beta0i[5]*p1.6[i]+
beta0i[6]*p1.8[i]+
beta0i[7]*p1.9[i]+
beta0i[8]*p2.1[i]+
beta0i[9]*p2.10[i]+
beta0i[10]*p2.3[i]+
beta0i[11]*p2.4[i]+
beta0i[12]*p2.5[i]+
beta0i[13]*p2.6[i]+
beta0i[14]*p2.7[i]+
beta0i[15]*p2.9[i]+
beta0i[16]*p3.10[i]+
beta0i[17]*p3.2[i]+
beta0i[18]*p3.3[i]+
beta0i[19]*p3.4[i]+
beta0i[20]*p3.5[i]+
beta0i[21]*p3.6[i]+
beta0i[22]*p3.7[i]+
beta0i[23]*p3.8[i]+
beta0i[24]*p4.1[i]+
beta0i[25]*p4.10[i]+
beta0i[26]*p4.2[i]+
beta0i[27]*p4.3[i]+
beta0i[28]*p4.4[i]+
beta0i[29]*p4.5[i]+
beta0i[30]*p4.6[i]+
beta0i[31]*p4.7[i]+
beta0i[32]*p4.8[i]+
beta0i[33]*p4.9[i]+
beta1i[1]*p1.2[i]*dia[i]+
beta1i[2]*p1.3[i]*dia[i]+
beta1i[3]*p1.4[i]*dia[i]+
beta1i[4]*p1.5[i]*dia[i]+
beta1i[5]*p1.6[i]*dia[i]+
beta1i[6]*p1.8[i]*dia[i]+
beta1i[7]*p1.9[i]*dia[i]+
beta1i[8]*p2.1[i]*dia[i]+
beta1i[9]*p2.10[i]*dia[i]+
beta1i[10]*p2.3[i]*dia[i]+
beta1i[11]*p2.4[i]*dia[i]+
beta1i[12]*p2.5[i]*dia[i]+
beta1i[13]*p2.6[i]*dia[i]+
beta1i[14]*p2.7[i]*dia[i]+
beta1i[15]*p2.9[i]*dia[i]+
beta1i[16]*p3.10[i]*dia[i]+
beta1i[17]*p3.2[i]*dia[i]+
beta1i[18]*p3.3[i]*dia[i]+
beta1i[19]*p3.4[i]*dia[i]+
beta1i[20]*p3.5[i]*dia[i]+
beta1i[21]*p3.6[i]*dia[i]+
beta1i[22]*p3.7[i]*dia[i]+
beta1i[23]*p3.8[i]*dia[i]+
beta1i[24]*p4.1[i]*dia[i]+
beta1i[25]*p4.10[i]*dia[i]+
beta1i[26]*p4.2[i]*dia[i]+
beta1i[27]*p4.3[i]*dia[i]+
beta1i[28]*p4.4[i]*dia[i]+
beta1i[29]*p4.5[i]*dia[i]+
beta1i[30]*p4.6[i]*dia[i]+
beta1i[31]*p4.7[i]*dia[i]+
beta1i[32]*p4.8[i]*dia[i]+
beta1i[33]*p4.9[i]*dia[i];
}
}
model {
beta0i ~ normal(0, sigma0);
beta1i ~ normal(0, sigma1);
Y ~ normal(mu, sigma_error);
}
"
stan.fit1 <- stan(
model_code = stan.mod1,
data       = dat,
chains     = 2,
iter       = 100,
warmup     = 50,
cores      = parallel::detectCores(),
)
library( dplyr)
library(rstan)
library(lme4)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
load("germinacion.Rdata")
vacios = names(which(table(base$altura,base$planta)[1,]>1))
`%notin%` <- Negate(`%in%`)
base2 <- base %>% filter( planta %notin% vacios)
#hay 33 plantas
levels( base2$planta) = paste( "p", 1:40, sep = "")
#base$edad1=base$edad-8 TENGO QUE HACERLO?
View(base2)
library( dplyr)
library(rstan)
library(lme4)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
load("germinacion.Rdata")
levels( base$planta) = paste( "p", 1:40, sep = "")
vacios = names(which(table(base$altura,base$planta)[1,]>1))
`%notin%` <- Negate(`%in%`)
base2 <- base %>% filter( planta %notin% vacios)
#hay 33 plantas
#base$edad1=base$edad-8 TENGO QUE HACERLO?
View(base2)
View(base)
1:40
load("germinacion.Rdata")
View(base)
levels( base$planta)
